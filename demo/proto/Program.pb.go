// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: Program.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ProgramResponse struct {
	ErrCode              int32                         `protobuf:"varint,1,opt,name=errCode,proto3" json:"errCode,omitempty"`
	Msg                  string                        `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data                 map[string]*ProgramChannelDto `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *ProgramResponse) Reset()         { *m = ProgramResponse{} }
func (m *ProgramResponse) String() string { return proto.CompactTextString(m) }
func (*ProgramResponse) ProtoMessage()    {}
func (*ProgramResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe8686cf88b826c, []int{0}
}
func (m *ProgramResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProgramResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProgramResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProgramResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProgramResponse.Merge(m, src)
}
func (m *ProgramResponse) XXX_Size() int {
	return m.Size()
}
func (m *ProgramResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProgramResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProgramResponse proto.InternalMessageInfo

func (m *ProgramResponse) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *ProgramResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *ProgramResponse) GetData() map[string]*ProgramChannelDto {
	if m != nil {
		return m.Data
	}
	return nil
}

type ProgramChannelDto struct {
	ChannelId            string        `protobuf:"bytes,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Programs             []*ProgramDto `protobuf:"bytes,2,rep,name=programs,proto3" json:"programs,omitempty"`
	UpdateInfo           string        `protobuf:"bytes,3,opt,name=updateInfo,proto3" json:"updateInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ProgramChannelDto) Reset()         { *m = ProgramChannelDto{} }
func (m *ProgramChannelDto) String() string { return proto.CompactTextString(m) }
func (*ProgramChannelDto) ProtoMessage()    {}
func (*ProgramChannelDto) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe8686cf88b826c, []int{1}
}
func (m *ProgramChannelDto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProgramChannelDto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProgramChannelDto.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProgramChannelDto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProgramChannelDto.Merge(m, src)
}
func (m *ProgramChannelDto) XXX_Size() int {
	return m.Size()
}
func (m *ProgramChannelDto) XXX_DiscardUnknown() {
	xxx_messageInfo_ProgramChannelDto.DiscardUnknown(m)
}

var xxx_messageInfo_ProgramChannelDto proto.InternalMessageInfo

func (m *ProgramChannelDto) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *ProgramChannelDto) GetPrograms() []*ProgramDto {
	if m != nil {
		return m.Programs
	}
	return nil
}

func (m *ProgramChannelDto) GetUpdateInfo() string {
	if m != nil {
		return m.UpdateInfo
	}
	return ""
}

type ProgramDto struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	StartTime            int64    `protobuf:"varint,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime              int64    `protobuf:"varint,3,opt,name=endTime,proto3" json:"endTime,omitempty"`
	ProgramId            string   `protobuf:"bytes,4,opt,name=programId,proto3" json:"programId,omitempty"`
	Source               int32    `protobuf:"varint,5,opt,name=source,proto3" json:"source,omitempty"`
	OpenId               string   `protobuf:"bytes,6,opt,name=openId,proto3" json:"openId,omitempty"`
	ProgramName          string   `protobuf:"bytes,7,opt,name=programName,proto3" json:"programName,omitempty"`
	HImage               string   `protobuf:"bytes,8,opt,name=hImage,proto3" json:"hImage,omitempty"`
	IsBook               int32    `protobuf:"varint,9,opt,name=isBook,proto3" json:"isBook,omitempty"`
	Url                  string   `protobuf:"bytes,10,opt,name=url,proto3" json:"url,omitempty"`
	Tags                 string   `protobuf:"bytes,11,opt,name=tags,proto3" json:"tags,omitempty"`
	Vid                  string   `protobuf:"bytes,12,opt,name=vid,proto3" json:"vid,omitempty"`
	VideoType            int32    `protobuf:"varint,13,opt,name=videoType,proto3" json:"videoType,omitempty"`
	EpisodeType          int32    `protobuf:"varint,14,opt,name=episodeType,proto3" json:"episodeType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProgramDto) Reset()         { *m = ProgramDto{} }
func (m *ProgramDto) String() string { return proto.CompactTextString(m) }
func (*ProgramDto) ProtoMessage()    {}
func (*ProgramDto) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe8686cf88b826c, []int{2}
}
func (m *ProgramDto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProgramDto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProgramDto.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProgramDto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProgramDto.Merge(m, src)
}
func (m *ProgramDto) XXX_Size() int {
	return m.Size()
}
func (m *ProgramDto) XXX_DiscardUnknown() {
	xxx_messageInfo_ProgramDto.DiscardUnknown(m)
}

var xxx_messageInfo_ProgramDto proto.InternalMessageInfo

func (m *ProgramDto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProgramDto) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *ProgramDto) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *ProgramDto) GetProgramId() string {
	if m != nil {
		return m.ProgramId
	}
	return ""
}

func (m *ProgramDto) GetSource() int32 {
	if m != nil {
		return m.Source
	}
	return 0
}

func (m *ProgramDto) GetOpenId() string {
	if m != nil {
		return m.OpenId
	}
	return ""
}

func (m *ProgramDto) GetProgramName() string {
	if m != nil {
		return m.ProgramName
	}
	return ""
}

func (m *ProgramDto) GetHImage() string {
	if m != nil {
		return m.HImage
	}
	return ""
}

func (m *ProgramDto) GetIsBook() int32 {
	if m != nil {
		return m.IsBook
	}
	return 0
}

func (m *ProgramDto) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *ProgramDto) GetTags() string {
	if m != nil {
		return m.Tags
	}
	return ""
}

func (m *ProgramDto) GetVid() string {
	if m != nil {
		return m.Vid
	}
	return ""
}

func (m *ProgramDto) GetVideoType() int32 {
	if m != nil {
		return m.VideoType
	}
	return 0
}

func (m *ProgramDto) GetEpisodeType() int32 {
	if m != nil {
		return m.EpisodeType
	}
	return 0
}

func init() {
	proto.RegisterType((*ProgramResponse)(nil), "proto.ProgramResponse")
	proto.RegisterMapType((map[string]*ProgramChannelDto)(nil), "proto.ProgramResponse.DataEntry")
	proto.RegisterType((*ProgramChannelDto)(nil), "proto.ProgramChannelDto")
	proto.RegisterType((*ProgramDto)(nil), "proto.ProgramDto")
}

func init() { proto.RegisterFile("Program.proto", fileDescriptor_dbe8686cf88b826c) }

var fileDescriptor_dbe8686cf88b826c = []byte{
	// 428 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x51, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x65, 0xe3, 0x24, 0xad, 0x27, 0x14, 0xda, 0x3d, 0xa0, 0x15, 0x42, 0x96, 0x95, 0x53, 0x2e,
	0xe4, 0x50, 0x38, 0x20, 0x8e, 0x6d, 0x39, 0xf8, 0x82, 0xc0, 0xea, 0x0f, 0x2c, 0xdd, 0x21, 0xb5,
	0x1a, 0x7b, 0xad, 0xdd, 0x75, 0xa4, 0xdc, 0xf8, 0x0c, 0xbe, 0x08, 0x71, 0xe4, 0x13, 0x50, 0xf8,
	0x01, 0x3e, 0x01, 0xcd, 0xac, 0x1b, 0xa7, 0xf4, 0xe4, 0x7d, 0x6f, 0xe6, 0xcd, 0x9b, 0xe7, 0x81,
	0x93, 0x4f, 0xce, 0xae, 0x9c, 0xae, 0x97, 0xad, 0xb3, 0xc1, 0xca, 0x09, 0x7f, 0xe6, 0x3f, 0x04,
	0x3c, 0xef, 0x0b, 0x25, 0xfa, 0xd6, 0x36, 0x1e, 0xa5, 0x82, 0x23, 0x74, 0xee, 0xd2, 0x1a, 0x54,
	0x22, 0x17, 0x8b, 0x49, 0x79, 0x0f, 0xe5, 0x29, 0x24, 0xb5, 0x5f, 0xa9, 0x51, 0x2e, 0x16, 0x69,
	0x49, 0x4f, 0xf9, 0x16, 0xc6, 0x46, 0x07, 0xad, 0x92, 0x3c, 0x59, 0xcc, 0xce, 0xf3, 0x38, 0x7c,
	0xf9, 0xdf, 0xc4, 0xe5, 0x95, 0x0e, 0xfa, 0x43, 0x13, 0xdc, 0xb6, 0xe4, 0xee, 0x97, 0x9f, 0x21,
	0xdd, 0x53, 0x34, 0xf4, 0x0e, 0xb7, 0x6c, 0x95, 0x96, 0xf4, 0x94, 0x4b, 0x98, 0x6c, 0xf4, 0xba,
	0x43, 0x36, 0x9a, 0x9d, 0xab, 0x87, 0x53, 0x2f, 0x6f, 0x75, 0xd3, 0xe0, 0xfa, 0x2a, 0xd8, 0x32,
	0xb6, 0xbd, 0x1f, 0xbd, 0x13, 0xf3, 0x6f, 0x02, 0xce, 0x1e, 0x35, 0xc8, 0x57, 0x90, 0xde, 0x44,
	0x54, 0x98, 0xde, 0x61, 0x20, 0xe4, 0x6b, 0x38, 0x6e, 0xa3, 0xc4, 0xab, 0x11, 0x07, 0x38, 0x7b,
	0x68, 0x45, 0x1e, 0xfb, 0x16, 0x99, 0x01, 0x74, 0xad, 0xd1, 0x01, 0x8b, 0xe6, 0xab, 0x55, 0x09,
	0x4f, 0x3b, 0x60, 0xe6, 0x7f, 0x47, 0x00, 0x83, 0x50, 0x4a, 0x18, 0x37, 0xba, 0xc6, 0xde, 0x96,
	0xdf, 0xb4, 0x8f, 0x0f, 0xda, 0x85, 0xeb, 0xaa, 0x8e, 0xe9, 0x92, 0x72, 0x20, 0xf8, 0xc7, 0x37,
	0x86, 0x6b, 0x09, 0xd7, 0xee, 0x21, 0xe9, 0xfa, 0x35, 0x0a, 0xa3, 0xc6, 0x31, 0xc7, 0x9e, 0x90,
	0x2f, 0x60, 0xea, 0x6d, 0xe7, 0x6e, 0x50, 0x4d, 0xf8, 0x5e, 0x3d, 0x22, 0xde, 0xb6, 0xd8, 0x14,
	0x46, 0x4d, 0x59, 0xd2, 0x23, 0x99, 0xc3, 0xac, 0x17, 0x7f, 0xa4, 0x05, 0x8f, 0xb8, 0x78, 0x48,
	0x91, 0xf2, 0xb6, 0xa8, 0xf5, 0x0a, 0xd5, 0x71, 0x54, 0x46, 0x44, 0x7c, 0xe5, 0x2f, 0xac, 0xbd,
	0x53, 0x69, 0x74, 0x8a, 0x88, 0x6e, 0xd8, 0xb9, 0xb5, 0x82, 0x78, 0xc3, 0xce, 0xad, 0x29, 0x7d,
	0xd0, 0x2b, 0xaf, 0x66, 0x31, 0x3d, 0xbd, 0xa9, 0x6b, 0x53, 0x19, 0xf5, 0x34, 0x76, 0x6d, 0x2a,
	0x43, 0xb9, 0x36, 0x95, 0x41, 0x7b, 0xbd, 0x6d, 0x51, 0x9d, 0xf0, 0xc8, 0x81, 0xa0, 0x3d, 0xb1,
	0xad, 0xbc, 0x35, 0xc8, 0xf5, 0x67, 0x5c, 0x3f, 0xa4, 0x2e, 0x4e, 0x7f, 0xee, 0x32, 0xf1, 0x6b,
	0x97, 0x89, 0xdf, 0xbb, 0x4c, 0x7c, 0xff, 0x93, 0x3d, 0xf9, 0x32, 0xe5, 0x03, 0xbe, 0xf9, 0x17,
	0x00, 0x00, 0xff, 0xff, 0xc7, 0xfd, 0x75, 0x0d, 0xef, 0x02, 0x00, 0x00,
}

func (m *ProgramResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProgramResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProgramResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		for k := range m.Data {
			v := m.Data[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintProgram(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintProgram(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintProgram(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintProgram(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.ErrCode != 0 {
		i = encodeVarintProgram(dAtA, i, uint64(m.ErrCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProgramChannelDto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProgramChannelDto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProgramChannelDto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UpdateInfo) > 0 {
		i -= len(m.UpdateInfo)
		copy(dAtA[i:], m.UpdateInfo)
		i = encodeVarintProgram(dAtA, i, uint64(len(m.UpdateInfo)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Programs) > 0 {
		for iNdEx := len(m.Programs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Programs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProgram(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintProgram(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProgramDto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProgramDto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProgramDto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EpisodeType != 0 {
		i = encodeVarintProgram(dAtA, i, uint64(m.EpisodeType))
		i--
		dAtA[i] = 0x70
	}
	if m.VideoType != 0 {
		i = encodeVarintProgram(dAtA, i, uint64(m.VideoType))
		i--
		dAtA[i] = 0x68
	}
	if len(m.Vid) > 0 {
		i -= len(m.Vid)
		copy(dAtA[i:], m.Vid)
		i = encodeVarintProgram(dAtA, i, uint64(len(m.Vid)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Tags) > 0 {
		i -= len(m.Tags)
		copy(dAtA[i:], m.Tags)
		i = encodeVarintProgram(dAtA, i, uint64(len(m.Tags)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintProgram(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x52
	}
	if m.IsBook != 0 {
		i = encodeVarintProgram(dAtA, i, uint64(m.IsBook))
		i--
		dAtA[i] = 0x48
	}
	if len(m.HImage) > 0 {
		i -= len(m.HImage)
		copy(dAtA[i:], m.HImage)
		i = encodeVarintProgram(dAtA, i, uint64(len(m.HImage)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ProgramName) > 0 {
		i -= len(m.ProgramName)
		copy(dAtA[i:], m.ProgramName)
		i = encodeVarintProgram(dAtA, i, uint64(len(m.ProgramName)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.OpenId) > 0 {
		i -= len(m.OpenId)
		copy(dAtA[i:], m.OpenId)
		i = encodeVarintProgram(dAtA, i, uint64(len(m.OpenId)))
		i--
		dAtA[i] = 0x32
	}
	if m.Source != 0 {
		i = encodeVarintProgram(dAtA, i, uint64(m.Source))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ProgramId) > 0 {
		i -= len(m.ProgramId)
		copy(dAtA[i:], m.ProgramId)
		i = encodeVarintProgram(dAtA, i, uint64(len(m.ProgramId)))
		i--
		dAtA[i] = 0x22
	}
	if m.EndTime != 0 {
		i = encodeVarintProgram(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x18
	}
	if m.StartTime != 0 {
		i = encodeVarintProgram(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintProgram(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProgram(dAtA []byte, offset int, v uint64) int {
	offset -= sovProgram(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProgramResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErrCode != 0 {
		n += 1 + sovProgram(uint64(m.ErrCode))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovProgram(uint64(l))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovProgram(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovProgram(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovProgram(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProgramChannelDto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovProgram(uint64(l))
	}
	if len(m.Programs) > 0 {
		for _, e := range m.Programs {
			l = e.Size()
			n += 1 + l + sovProgram(uint64(l))
		}
	}
	l = len(m.UpdateInfo)
	if l > 0 {
		n += 1 + l + sovProgram(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProgramDto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovProgram(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovProgram(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovProgram(uint64(m.EndTime))
	}
	l = len(m.ProgramId)
	if l > 0 {
		n += 1 + l + sovProgram(uint64(l))
	}
	if m.Source != 0 {
		n += 1 + sovProgram(uint64(m.Source))
	}
	l = len(m.OpenId)
	if l > 0 {
		n += 1 + l + sovProgram(uint64(l))
	}
	l = len(m.ProgramName)
	if l > 0 {
		n += 1 + l + sovProgram(uint64(l))
	}
	l = len(m.HImage)
	if l > 0 {
		n += 1 + l + sovProgram(uint64(l))
	}
	if m.IsBook != 0 {
		n += 1 + sovProgram(uint64(m.IsBook))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovProgram(uint64(l))
	}
	l = len(m.Tags)
	if l > 0 {
		n += 1 + l + sovProgram(uint64(l))
	}
	l = len(m.Vid)
	if l > 0 {
		n += 1 + l + sovProgram(uint64(l))
	}
	if m.VideoType != 0 {
		n += 1 + sovProgram(uint64(m.VideoType))
	}
	if m.EpisodeType != 0 {
		n += 1 + sovProgram(uint64(m.EpisodeType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovProgram(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProgram(x uint64) (n int) {
	return sovProgram(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProgramResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProgram
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProgramResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProgramResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProgram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProgram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProgram
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProgram
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProgram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProgram
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProgram
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[string]*ProgramChannelDto)
			}
			var mapkey string
			var mapvalue *ProgramChannelDto
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProgram
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProgram
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthProgram
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthProgram
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProgram
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthProgram
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthProgram
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ProgramChannelDto{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipProgram(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthProgram
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProgram(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProgram
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProgramChannelDto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProgram
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProgramChannelDto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProgramChannelDto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProgram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProgram
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProgram
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Programs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProgram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProgram
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProgram
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Programs = append(m.Programs, &ProgramDto{})
			if err := m.Programs[len(m.Programs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProgram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProgram
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProgram
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProgram(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProgram
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProgramDto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProgram
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProgramDto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProgramDto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProgram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProgram
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProgram
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProgram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProgram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProgram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProgram
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProgram
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProgramId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProgram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProgram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProgram
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProgram
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProgram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProgram
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProgram
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProgramName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProgram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProgram
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProgram
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBook", wireType)
			}
			m.IsBook = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProgram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsBook |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProgram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProgram
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProgram
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProgram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProgram
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProgram
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProgram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProgram
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProgram
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoType", wireType)
			}
			m.VideoType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProgram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VideoType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpisodeType", wireType)
			}
			m.EpisodeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProgram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpisodeType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProgram(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProgram
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProgram(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProgram
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProgram
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProgram
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProgram
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProgram
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProgram
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProgram        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProgram          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProgram = fmt.Errorf("proto: unexpected end of group")
)
